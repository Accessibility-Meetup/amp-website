name: Deploy Astro to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.prepare_env.outputs.NODE_ENV }}
    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Prepare environment variable
        id: prepare_env
        run: echo "NODE_ENV=${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_OUTPUT

      - name: Build Astro site
        env:
          NODE_ENV: ${{ github.event.inputs.environment || 'staging' }}
        run: pnpm run build

      - name: Upload artifact for GitHub Pages
        if: steps.prepare_env.outputs.NODE_ENV == 'staging'
        uses: actions/upload-pages-artifact@v3
        with:
         path: ./dist

      - name: Upload artifact for FTP
        if: steps.prepare_env.outputs.NODE_ENV == 'production'
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifact-ftp
          path: ./dist

  deploy_to_gh_pages:
    needs: build
    if: needs.build.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy_to_ftp:
    needs: build
    if: needs.build.outputs.environment == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: ./dist

      - name: Deploy to FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/
          server-dir: public_html/
          protocol: ftps
